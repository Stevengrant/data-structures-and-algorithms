/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sta_que;

        import org.junit.Test;
        import static org.junit.Assert.*;

public class QueueTest {
 @Test public void test_queue_instanciation(){
     // Can successfully instantiate an empty queue
     Queue queue = new Queue();
        assertNull("Queue back should be null", queue.back);
    }
    @Test public void test_queue_enqueue_shouldAddValToBack(){
        // Can successfully enqueue into a queue
        // Can successfully enqueue multiple values into a queue
        Queue queue = new Queue();
        queue.enqueue("foo");
        assertTrue("Should have val at back", queue.back.value.equals("foo"));
        queue.enqueue("bar");
        assertTrue("Should have val at back", queue.back.value.equals("bar"));
        assertTrue("Should have next val which was previously at back", queue.back.next.value.equals("foo"));
    }
    @Test public void test_queue_dequeue(){
        // Can successfully dequeue out of a queue the expected value
        // Can successfully empty a queue after multiple dequeues
        Queue queue = new Queue();
        queue.enqueue("first in");
        queue.enqueue("second in");
        queue.enqueue("third in");
        assertTrue("First in should be returned first by deque", queue.dequeue().equals("first in"));
        assertTrue("Second in should be returned first by deque", queue.dequeue().equals("second in"));
        assertTrue("Third in should be returned first by deque", queue.dequeue().equals("third in"));
        assertNull("Empty queue should return null", queue.dequeue());
    }
    @Test public void test_peek (){
        // Can successfully peek into a queue, seeing the expected value
        Queue queue = new Queue();
        try {
            queue.peek();
        } catch (NullPointerException e){
            assertTrue("Throws a null pointer exption when theres nothing to peek", true);
        }
        queue.enqueue("first in");
        assertTrue("returns the first value in", queue.peek().equals("first in"));
        queue.enqueue("second in");
        queue.enqueue("third in");
        assertTrue("returns the first value in", queue.peek().equals("first in"));

    }
}
