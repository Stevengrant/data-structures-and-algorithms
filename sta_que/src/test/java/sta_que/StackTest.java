/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sta_que;

        import org.junit.Test;
        import static org.junit.Assert.*;

public class StackTest {
    // Can successfully instantiate an empty stack
    @Test public void test_Stack_GeneratePushShouldHaveInitValOfNull(){
        Stack stack = new Stack();
        assertNull("Stack should initialize to have a top value of null", stack.top);

    }
    @Test public void test_Stack_push(){
        // Can successfully push onto a stack
        // Can successfully push multiple values onto a stack

        Stack stack = new Stack();
        assertNull("Stack should initialize to have a top value of null", stack.top);
        stack.push("foo");
        assertNotNull("Stack should to have a top value that is not null after pushing", stack.top);
    }
    @Test public void test_Stack_pop(){
        // Can successfully pop off the stack
        // Can successfully empty a stack after multiple pops
        Stack stack = new Stack();
        assertNull("Stack should initialize to have a top value of null", stack.top);
        stack.push("foo");
        assertNotNull("Stack should to have a top value that is not null after pushing", stack.top);
        assertTrue("Pop should return the tops val", stack.pop().equals("foo"));
        stack.pop();
        assertNull("After poping the last item, top should be null", stack.top);
    }
    @Test public void test_peek (){
        // Can successfully peek the next item on the stack
        Stack stack = new Stack();
        assertNull("peek returns null if the value is null", stack.peek());
        stack.push("foo");
        assertTrue("peek returns the value of top if it has a value", stack.peek().equals("foo"));
    }
}
